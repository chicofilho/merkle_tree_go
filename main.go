package main

import (
	"chicofilho/merkletree/merkleTree"
	"fmt"
	"strconv"
)

// usage of the merkle tree
func main() {
	// creating a sequence of bytes
	bytes := make([][]byte, 13, 13)
	for i := 0; i < 13; i++ {
		bytes[i] = []byte("a sequence at: " + strconv.Itoa(i))
	}

	// Initializing the merkleTree by bytes
	mt := merkleTree.MerkleTree{}
	mt.CreateTreeBytes(bytes)

	// Getting a leaf for creating the path
	leaf := mt.Leafs[7]
	// Get a path for the leafs hash
	path := mt.GetMerklePath(leaf.GetHash())

	// Printing the ammount of leafs this tree has
	fmt.Printf("Amount of leafs: %d \n", len(bytes))
	// Printing the tree itself (by hashes)
	PrintMerkleTree(mt)
	// Printing information about the merkle path
	fmt.Println("Creating merkle path for: " + leaf.GetHash().ToString())
	fmt.Printf("A merkle path has size: %d \n", len(path))
	// Making the merkle proof
	hash := path.MerkleProof(leaf.GetHash())
	fmt.Println("Hash generated by merkle proof: " + hash.ToString())
	fmt.Println("Hash from tree root " + mt.Root.GetHash().ToString())
	equality := mt.Root.GetHash().ToString() == hash.ToString()
	fmt.Printf("Are they equal? %t \n", equality)

}
